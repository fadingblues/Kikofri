I"/<style>
img {
    width: 120px;
    margin: 3rem auto 0 auto;
}
p.pic {
    margin: auto;
    margin-bottom: 2rem;
    text-align: center;
    font-size: 0.75rem;
}
</style>

<p><img src="http://localhost:4000/assets/images/kikof
rieye.png" alt="Kikofrieye. Used as default favicon. CC0." /></p>
<p class="pic">Pictured: <em>'Ofri Eyeparchment'</em>. Default
favicon/spokesperson.  (CC0/Public Domain).</p>

<p><strong>Kikofri</strong> is a theme for <code class="highlighter-rouge">jekyll</code> that started out as a fork of the <a href="https://github.com/gfjaru/Kiko">Kiko
theme</a>. Today I’d say Kikofri is Kiko mangled beyond recognition. It came
about because I like my themes like I like my music: ugly, old and barren. It’s
an assortment of hacks filtered through web-design choices from the turn of the
millennium.</p>

<p>The theme doesn’t use any Google Analytics spyware, and it doesn’t rely on
Google Fonts API for font rendering and the like. Since I never particularly
liked ‘<a href="https://github.com/jekyll/jekyll-seo-tag">jekyll-seo-tag</a>’ there’s second-rate implementation of it under
<code class="highlighter-rouge">\_includes/head.html</code>. Pure <code class="highlighter-rouge">liquid</code>. Configure it to your liking. The <em>absence</em>
of “…battle-tested” templates infused with hype-words is guaranteed.</p>

<p>Skip to <a href="#gistofit">the details</a>.</p>

<h3 id="quirks-mode-">Quirks Mode: <a href="" id="micros"></a></h3>

<p>Kikofri comes with a few <em>quirks</em>. Since I’m an old person in an young body my
sense of humor is dry. Therefore I decided to call the quirky <a href="https://en.wikipedia.org/wiki/Macro_(computer_science)">macro</a>-like
thingies ‘micros’, and thus we use the <strong><code class="highlighter-rouge">µ</code></strong> symbol to make the most of them.
(Honestly they’re just liquid filters). Take a look at
‘<a href="https://github.com/kxxvii/Kikofri/blob/master/_layouts/post.html">_layouts/post.html</a>’ if you wonder how they are implemented.</p>

<p>The sequences are:</p>

<ul>
  <li><strong>micro-hash</strong>:<br />
  Produces “Wikipedia-Style” reference links:
    <ul>
      <li>“micro-hash” equals ‘left bracket’ ( <strong><code class="highlighter-rouge">µ#</code></strong> = ‘<strong><code class="highlighter-rouge">&lt;sup&gt;[</code></strong>’ ),</li>
      <li>“hash-micro” equals ‘right bracket’ ( <strong><code class="highlighter-rouge">#µ</code></strong> = ‘<strong><code class="highlighter-rouge">]&lt;/sup&gt;</code></strong>’ )</li>
    </ul>
  </li>
  <li><strong>micro-semis</strong>:<br />
  Produces “Bring Attention To element” tag:
    <ul>
      <li>“micro-semis” (‘<strong><code class="highlighter-rouge">µ;;</code></strong>)’ equals ‘<strong><code class="highlighter-rouge">&lt;b&gt;</code></strong>’</li>
      <li>“semis-micro” (‘<strong><code class="highlighter-rouge">;;µ</code></strong>’) equals ‘<strong><code class="highlighter-rouge">&lt;/b&gt;</code></strong>’</li>
    </ul>
  </li>
  <li><strong>micro-micro</strong> (What a stupid name):<br />
  Indentation:
    <ul>
      <li>“micro-micro” (“<strong><code class="highlighter-rouge">µµ</code></strong>”) “<strong><code class="highlighter-rouge">&amp;emsp;</code></strong>”</li>
    </ul>
  </li>
</ul>

<p><strong>Example:</strong> Here comes the stepmother of all demo(n)s<sup>[<a href="https://en.wikipedia.org/wiki/The_Mother_of_All_Demos">a</a>]</sup>. I
really need to put <b>emphasis</b> on the next paragraph.</p>

<p>  A paragraph like all others, but this one is mine. It is also a little too
long because I need to put enough letters here to justify this indented poorly
worded paragraph.</p>

<p>Here’s how it looks in a source file:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Here comes the stepmother of all demo(n)sµ#[a][reflink]#µ. I really
need to put µ;;emphasis;;µ on the next paragraph.

µµ A paragraph like all others... /* And so on */
</code></pre></div></div>

<p>Why use ‘micros’? Well, you don’t need to. Rip ‘em out if you want to. Since
I’m used to ugly stuff I just prefer not to use too many fancy plugins. Take a
look at the reference link especially; ‘<code class="highlighter-rouge">µ#[a][reflink]#µ</code>’ Ain’t it ugly?
<strong><em>Yes it is</em></strong>, <em>and it’s awesome</em>.</p>

<p>Markdown can be pretty awkward too though. Ever tried to wrap all lines at a
specific column no matter the cost because you dislike long lines? Ever done it
while trying to produce a clickable image link <em>with a caption</em>? Don’t try it.
That’s what killed Superman.<style>a.d{color: #fff;font-weight:bold;}a.d:hover
{color:#000;}</style><a class="d"> TWICE!!!</a>?</p>

<h3 id="other-notes">Other notes:</h3>

<p>I’ve at least <em>tried</em> to take a modular approach. That is to break up the theme
into smaller, more or less  self-contained parts, in the form of ‘includes’
where applicable.</p>

<p>There is also a configurable front matter value ‘<code class="highlighter-rouge">pagin</code>’ which serves as a
switch for this theme’s “pagination”/archive feature. The variable ‘<code class="highlighter-rouge">pagnum</code>’
can be found under <code class="highlighter-rouge">_default.html</code>. It decides the number of entries at
<code class="highlighter-rouge">index.html</code> and the offset in the archive. (Default: 10).</p>

<p>The <a href="/archive">archive</a> is just a neat list of posts. Since few will write
3048+ articles, it’ll do. Plain HTML/CSS.</p>

<h3 id="some-poetry">Some Poetry:</h3>

<p><strong>On a more idealistic note</strong>: I always <em>hated</em> the word “blog”. I recognize
one “blog” and it’s <a href="https://metroid.fandom.com/wiki/Alpha_Blogg">this one</a>. I always preferred the concept of a site,
because it can be anything. A newspaper, an encyclopedia, a collections of
essays or a book. The ‘micros’ are small and simple hacks to turn a “blog” into
something more than just a “blog”.</p>

<p>They are stupid unlikely sequences of symbols to create some neat stuff. While
still sticking to the goal of being ugly and a <em>“dirty and malnourished jekyll
theme”</em> of course.</p>

<p>Since I eschew the “blog”-aspect of it all Kikofri uses the ‘Article’ type
instead of the ‘BlogPosting’ type <a href="https://github.com/kxxvii/Kikofri/blob/master/_includes/head.html">in it’s meta-data</a>.</p>

<h3 id="what-it-all-boils-down-to">What It All Boils Down To:</h3>

<p>There’s no reason to use something fancy  when you can accomplish the same
things with HTML/CSS.</p>

<p>The thing is: a lot of the things people might want to say, write or show won’t
really require all that much. Even if it does it’s rarely as much as the first
5 search engine results makes you think.</p>

<p>Kikofri tries to keep it simple, being partly flawed by design, but hopefully
not too flawed. It looks the way it wants instead of following trends and it
strives to be reasonably easy to modify. Tweaking is learning.</p>

<p>Well, of course… You can’t turn the world upside down with a theme, but
worrying about your “content”, “workflow” and striving to be an automaton
spewing out mere fluff, i.e. “content”, is useless.</p>

<p><a href="https://www.gnu.org/philosophy/words-to-avoid.html#Content"><em>Don’t call it “content”</em></a>. It diminishes your work. It makes you a
commodity and what you create some kind of placeholder waiting to be replaced.</p>

<p>Or to quote <a href="/2016/07/16/example-post.html#theft">Proudhon</a> who put it so eloquently (replace ‘man’ with your
proper noun if you want to):</p>

<blockquote>
  <p>No extended argument would be required to show that the power to take from a
man his thought, his will, his personality, is a power of life and death; and
that to enslave a man is to kill him. Why, then, to this other question: WHAT
IS PROPERTY! may I not likewise answer, IT IS THEFT…</p>
</blockquote>

<h3 id="other-important-information-">Other Important information… <a href="" id="gistofit"></a></h3>

<p>…usually resides <a href="https://github.com/kxxvii/Kikofri/tree/master"><strong>HERE</strong></a>,
there are comments in the source files too, but a few clarifications would be
in order:</p>

<h4 id="_includes"><code class="highlighter-rouge">_includes</code></h4>

<ul>
  <li><code class="highlighter-rouge">arch_css.html</code>: Just some cosmetic inline <code class="highlighter-rouge">CSS</code> for <code class="highlighter-rouge">archive.md</code>.
    <ul>
      <li>If you find the <code class="highlighter-rouge">archive</code> page to be boring I’ll tell you this: <strong>IT’S
SUPPOSED TO BE BORING!</strong> A <em>long</em> boring list for the masses.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">top_small.html</code>: Includes <code class="highlighter-rouge">site.name</code>, or something else if you’d like, at
the top of pages. Also makes it easy to exclude from a given page.</li>
  <li><code class="highlighter-rouge">foot.html</code>: Footer. Closes “open tags” in <code class="highlighter-rouge">head.html</code>.</li>
  <li><code class="highlighter-rouge">head.html</code>: Apart from being <code class="highlighter-rouge">&lt;head&gt;</code> it contains meta-data. Some of it can
be modified in this file, but see <code class="highlighter-rouge">captures.html</code> for more variables. Entries
like:</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;meta name="author" content="{{ site.author }}" /&gt;
&lt;meta name="description" content="{{ site.description }}" /&gt;
</code></pre></div></div>

<p>Can be set in <code class="highlighter-rouge">_config.yml</code> for example.</p>
<ul>
  <li><code class="highlighter-rouge">captures.html</code> Contains most of the meta-data variables for <code class="highlighter-rouge">head.html</code>. You
can use these or set value values by hand.</li>
</ul>

<h4 id="_layouts"><code class="highlighter-rouge">_layouts</code></h4>

<ul>
  <li><code class="highlighter-rouge">default.html</code>: Creates the index page, and contains <code class="highlighter-rouge">pagnum</code> post entries.</li>
  <li><code class="highlighter-rouge">pages.html</code>: For separate pages like <code class="highlighter-rouge">about.md</code>. Also included in:</li>
  <li><code class="highlighter-rouge">post.html</code>: A post-specific layout. Useful if you want to make further
changes to posts and pages separately.</li>
  <li><code class="highlighter-rouge">pages</code>/<code class="highlighter-rouge">post</code> also  contains the <a href="#micros"><code class="highlighter-rouge">micros</code></a> markup.</li>
</ul>

<h4 id="assets-directory"><code class="highlighter-rouge">assets</code> directory</h4>

<p>Contains ‘pages’, ‘images’ and ‘style.css’ to make the root directory less
cluttered.</p>

<ul>
  <li><code class="highlighter-rouge">archive.md</code>: “placeholder” to produce the archive page. Contains the
variable <code class="highlighter-rouge">pagin</code> that can be true or false.
    <ul>
      <li><code class="highlighter-rouge">pagin</code> is also found in <code class="highlighter-rouge">index.html</code>, it’s basically just for telling
jekyll when to produce a paginated(ish) page. If true: <code class="highlighter-rouge">offset=pagnum</code>, if
false: <code class="highlighter-rouge">limit=pagnum</code>.</li>
      <li>It’s conceivable that one could use <code class="highlighter-rouge">pagin</code>/<code class="highlighter-rouge">pagnum</code> to produce a second
archive page for example.</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">tags.md</code> contains a bunch in inline <code class="highlighter-rouge">CSS</code>. The file itself produces the tags
page. Since any “day-to-day”-editing of it seem unlikely — it’s automated —
it might as well stay there.</li>
</ul>
:ET